user  root;
worker_processes  auto;

pid        /var/run/nginx.pid;

events {
    worker_connections  50;
}

http {
    include       mime.types;
    default_type  application/octet-stream;

    sendfile        on;
    keepalive_timeout  65;

    # Map $http_x_forwarded_for to $real_client_ip, defaulting to $remote_addr if empty
    map $http_x_forwarded_for $real_client_ip {
        ""      $remote_addr;
        default $http_x_forwarded_for;
    }

    # Custom log format to log both REMOTE_ADDR and X-Forwarded-For
    log_format main '$remote_addr - $remote_user [$time_local] "$request" '
                     '$status $body_bytes_sent "$http_referer" '
                     '"$http_user_agent" - "$http_x_forwarded_for" - '
                     '"$http_x_real_ip" - "$http_x_google_real_ip"';

    # Access and error logs are sent to stdout and stderr
    access_log /dev/stdout main;
    error_log /dev/stderr warn;

    server {
        listen       8080;
        server_name  localhost;

        root /srv/public;
        index index.php index.html index.htm;

        location / {
            try_files $uri /index.php$is_args$args;
        }

        location ~ \.php$ {
            try_files $uri =404;
            fastcgi_pass unix:/var/run/php/php-fpm.sock;
            fastcgi_index index.php;
            # Use $real_client_ip, which defaults to $remote_addr if $http_x_forwarded_for is empty
            # Keep in mind that google prevents people spoofing the x-forwarded-for and overrides it altogether
            # with the requester address
            fastcgi_param REMOTE_ADDR $real_client_ip;
            fastcgi_param SCRIPT_FILENAME $document_root$fastcgi_script_name;
            include fastcgi_params;
        }
    }
}
